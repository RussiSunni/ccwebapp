<!DOCTYPE html>
<html lang="en">

<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<meta http-equiv="X-UA-Compatible" content="ie=edge">
	<title>Concious Coding</title>
	<!-- CSS only -->
	<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/css/bootstrap.min.css" rel="stylesheet"
		integrity="sha384-gH2yIJqKdNHPEq0n4Mqa/HGKIhSkIHeL5AyhkYV8i59U5AR6csBvApHHNl/vI1Bx" crossorigin="anonymous">
	<!-- JavaScript Bundle with Popper -->
	<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/js/bootstrap.bundle.min.js"
		integrity="sha384-A3rJD856KowSb7dwlZdYEkO39Gagi7vIsF0jrRAoQmDKKtQBHUuLZ9AsSv4jD4Xa"
		crossorigin="anonymous"></script>
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
	<link rel="stylesheet" href="/stylesheets/style.css">
</head>

<body>
	<%- include('partials/navbar'); %>


		<div class="container-fluid">
			<div class="row">
				<h1 style="text-align: center;">Create Game</h1>
				<div class="col-sm-10">
					<a id="zoom_link">Zoom link</a>
				</div>
				<div class="col-sm-2">
					<label for="cohorts">Choose a cohort:</label>
					<select class="form-select" id="cohorts" name="cohorts">
						<option>Choose a cohort</option>>
					</select>
					<button class="btn brand-button" type="submit" onclick="ChooseCohort()">Submit</button>
				</div>
			</div>
			<div class="row">

				<div class="col-sm-2 brand-border">
					<h2>Game Settings</h2>
					<form action="/games/add" method="POST">
						<input type="hidden" id="cohort_id" name="cohort_id">
						<div class="mb-3">
							<label for="game-type">Game type</label>
							<select class="form-select" id="game_type" name="game_type">
							</select>
						</div>
						<div class="mb-3">
							<label for="map">Map</label>
							<select class="form-select" id="map" name="map">
							</select>
						</div>
						<div class="mb-3">
							<label for="name">Name</label>
							<input id="name" type="string" placeholder="name" name="name" class="form-control" required>
						</div>
						<div class="mb-3">
							<label for="rounds">Number of rounds</label>
							<input id="rounds" type="number" placeholder="rounds" name="rounds" class="form-control"
								required>
						</div>
						<div class="mb-3">
							<label for="moves">Moves per round</label>
							<input id="moves" type="number" placeholder="moves" name="moves" class="form-control"
								required>
						</div>
						<div class="mb-3">
							<label for="seconds">Seconds per round</label>
							<input id="seconds" type="number" placeholder="seconds" name="seconds" class="form-control"
								required>
						</div>
						<div class="mb-3">
							<label for="toggle_points">Points per connection</label>
							<input id="toggle_points" type="number" placeholder="points per connection"
								name="toggle_points" class="form-control" required>
						</div>
						<div class="mb-3">
							<label for="endpoint_points">Points per endpoint</label>
							<input id="endpoint_points" type="number" placeholder="Points per endpoint"
								name="endpoint_points" class="form-control" required>
						</div>
						<div class="mb-3">
							<label for="steals">Number of steals</label>
							<input id="steals" type="number" placeholder="steals" name="steals" class="form-control"
								required>
						</div>
						<button class="btn brand-button" type="submit">Create Game</button>
					</form>
					<h2 class="mt-3">Existing Games</h2>
					<table id="existing_games" class="table">
						<tbody>
						</tbody>
					</table>
				</div>

				<div id="teams" class="col-sm-8 brand-border" style="min-height: 700px;">
					<h2>Teams</h2>
					<div id="teamsInner">
						<button class="btn brand-button" onclick="CreateNewTeam()">New</button>
						<button class="btn brand-button" onclick="SetGameActive()">Set active</button>
						<div id="yellow_team" class="brand-border team_box" ondrop="drop_handler(event);"
							ondragover="dragover_handler(event);"></div>
						<div id="blue_team" class="brand-border team_box" ondrop="drop_handler(event);"
							ondragover="dragover_handler(event);"></div>
					</div>
					<iframe id="admin-gameview" width="960" height="600" style="display: none; margin: auto;"
						class="mt-3"></iframe>
				</div>
				<div class="col-sm-2 brand-border" style="min-height: 700px;">
					<table id="userTable" class="table">
						<tbody>
						</tbody>
					</table>
				</div>

			</div>
			<script>
				var currentCohortId;

				// Script for the game-types drop-down list
				var gameTypesUrl = "/game-types/list";
				// get the rows from the SQL query
				$.get(gameTypesUrl, function (data, status) {
					var select = document.getElementById("game_type");
					var options = data;

					for (var i = 0; i < options.length; i++) {
						var opt = options[i];
						var el = document.createElement("option");
						el.textContent = opt.name;
						el.value = opt.id;
						select.appendChild(el);
					}
				});

				// Script for the maps drop-down list
				var mapsUrl = "/maps/list";
				// get the rows from the SQL query
				$.get(mapsUrl, function (data, status) {
					var select = document.getElementById("map");
					var options = data;

					for (var i = 0; i < options.length; i++) {
						var opt = options[i];
						var el = document.createElement("option");
						el.textContent = opt.name;
						el.value = opt.id;
						select.appendChild(el);
					}
				});


				// Script for the cohorts drop-down list
				var cohortsUrl = "/cohorts/list";
				// get the rows from the SQL query
				$.get(cohortsUrl, function (data, status) {
					var select = document.getElementById("cohorts");

					//	console.log(data)

					var options = data;

					for (var i = 0; i < options.length; i++) {
						var opt = options[i];
						var el = document.createElement("option");
						el.textContent = opt.name;
						el.value = opt.id;
						select.appendChild(el);
					}

					if (sessionStorage.getItem("cohortId") != null && sessionStorage.getItem("cohortId") != "") {
						select.value = sessionStorage.getItem("cohortId");
						currentCohortId = sessionStorage.getItem("cohortId");
						// Populate hidden cohort input field in Create Game form.
						document.getElementById("cohort_id").setAttribute("value", sessionStorage.getItem("cohortId"));
						ChooseCohort();
					}
					else {
						select.value = options[0].id;
						currentCohortId = options[0].id;
						// Populate hidden cohort input field in Create Game form.
						document.getElementById("cohort_id").setAttribute("value", options[0].id);
						ChooseCohort();
					}

					// Script for the existing games list
					var gamesUrl = "/cohorts/" + currentCohortId + "/games";
					//ListGames(gamesUrl);
				});


				function ListGames(gamesUrl) {

					//	console.log("test");

					// get the rows from the SQL query
					$.get(gamesUrl, function (data, status) {
						var table = document.getElementById("existing_games");
						//	console.log(data.length);
						for (var i = 0; i < data.length; i++) {
							//		console.log(data.length);
							const button = document.createElement("button");
							var row = table.insertRow(0);
							var cell = row.insertCell(0);
							button.innerHTML = data[i].name;
							button.setAttribute("onclick", "ChooseGame(this)");
							button.setAttribute("data-game-id", data[i].id);
							cell.appendChild(button);
						}
					});
				}

				var gameId;

				// Press button to choose team.
				function ChooseGame(button) {
					var teamsInner = document.getElementById("teamsInner");
					teamsInner.style.display = "block";
					gameId = button.getAttribute("data-game-id");
				}

				let teamBox = document.getElementById('teamBox');
				var cohortId;

				function ChooseCohort() {
					cohortId = document.getElementById('cohorts').value;
					// Store the cohort id across pages;
					sessionStorage.setItem("cohortId", cohortId);

					// Refresh list of games.
					$("#existing_games tbody tr").remove()
					var gamesUrl = "/cohorts/" + cohortId + "/games";
					ListGames(gamesUrl);

					var usersInCohortUrl = "/cohorts/" + cohortId + "/users";

					// get the rows from the SQL query
					$.get(usersInCohortUrl, function (data, status) {
						var table = document.getElementById("userTable");
						$("#userTable tbody tr").remove()

						for (var i = 0; i < data.length; i++) {
							// Create table cells.
							var row = table.insertRow(0);
							var cell = row.insertCell(0);

							// Create div inside cell.
							const div = document.createElement("div");
							div.setAttribute("draggable", "true");
							div.classList.add("brand-border");
							div.classList.add("student_draggable");
							div.setAttribute("id", "src_move" + [i]);
							div.setAttribute("ondragstart", "dragstart_handler(event);");
							div.setAttribute("ondragend", "dragend_handler(event);");

							cell.appendChild(div);
							div.setAttribute("data-user-id", data[i].id);
							div.innerHTML = data[i].name;
						}
					});

					// Populate Zoom link in top right.
					var cohortUrl = "/cohorts/show/" + cohortId;
					$.get(cohortUrl, function (data, status) {

						var zoomLink = document.getElementById("zoom_link");
						if (data.zoom_link != null) {
							zoomLink.setAttribute("href", data.zoom_link);
							zoomLink.setAttribute("target", "_blank");
						}
						else {
							zoomLink.setAttribute("href", "#");
						}
					});

				}

				// ---

				function dragstart_handler(ev) {
					console.log("dragStart");
					// Change the source element's background color to signify drag has started
					ev.currentTarget.style.border = "dashed";
					// Add the id of the drag source element to the drag data payload so
					// it is available when the drop event is fired
					ev.dataTransfer.setData("text", ev.target.id);
					// Tell the browser only move is possible
					ev.effectAllowed = "move";
				}
				function dragover_handler(ev) {
					console.log("dragOver");
					// Change the target element's border to signify a drag over event
					// has occurred
					//ev.currentTarget.style.background = "lightblue";
					ev.preventDefault();
				}
				function drop_handler(ev) {
					console.log("Drop");
					ev.preventDefault();
					// Get the id of drag source element (that was added to the drag data
					// payload by the dragstart event handler)
					var id = ev.dataTransfer.getData("text");
					// Only Move the element if the source and destination ids are both "move"
					// if (id == "src_move" && ev.target.id == "dest_move") {
					// 	ev.target.appendChild(document.getElementById(id));
					// }
					if (ev.target.id == "yellow_team" || ev.target.id == "blue_team" || ev.target.id == "red_team" || ev.target.id == "orange_team" || ev.target.id == "purple_team" || ev.target.id == "green_team") {
						ev.target.appendChild(document.getElementById(id));
					}
				}
				function dragend_handler(ev) {
					console.log("dragEnd");
					// Restore source's border
					ev.target.style.border = "solid black";
					// Remove all of the drag data
					ev.dataTransfer.clearData();
				}

				let numTeams = 1;

				function SetGameActive() {

					function makeRandomString(length) {
						var result = '';
						var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
						var charactersLength = characters.length;
						for (var i = 0; i < length; i++) {
							result += characters.charAt(Math.floor(Math.random() *
								charactersLength));
						}
						return result;
					}

					var randomString = makeRandomString(5);

					var roomName = "RoomC" + cohortId + "G" + gameId + "R" + randomString;

					// Yellow team.
					let yellowTeam = document.getElementById('yellow_team');
					let yellowTeamChildNodes = yellowTeam.childNodes;
					for (let i = 0; i < yellowTeamChildNodes.length; i++) {
						let userName = yellowTeamChildNodes[i].innerHTML;
						let userId = yellowTeamChildNodes[i].getAttribute("data-user-id");
						let team = "Yellow";

						let loginLink = window.location.protocol + "//" + window.location.hostname + ":3000/games/pathways?";
						loginLink = loginLink + "nick_name=" + userName + "&team=" + team + "&game_id=" + gameId + "&room_name=" + roomName;

						// Update the users table.
						let data1 = { "login_link": loginLink }

						$.ajax({
							url: '/users/' + userId,
							type: 'PUT',
							contentType: 'application/json',
							data: JSON.stringify(data1), // access in body
							success: function (data1) {
								console.log('Links created.');
							}
						});
					}

					// Blue team.
					let blueTeam = document.getElementById('blue_team');
					let blueTeamChildNodes = blueTeam.childNodes;
					for (let i = 0; i < blueTeamChildNodes.length; i++) {
						let userName = blueTeamChildNodes[i].innerHTML;
						let userId = blueTeamChildNodes[i].getAttribute("data-user-id");
						let team = "Blue";

						let loginLink = window.location.protocol + "//" + window.location.hostname + ":3000/games/pathways?";
						loginLink = loginLink + "nick_name=" + userName + "&team=" + team + "&game_id=" + gameId + "&room_name=" + roomName;

						// Update the users table.
						let data2 = { "login_link": loginLink }

						$.ajax({
							url: '/users/' + userId,
							type: 'PUT',
							contentType: 'application/json',
							data: JSON.stringify(data2), // access in body
							success: function (data2) {
								console.log('Links created.');
							}
						});
					}

					let redTeam = document.getElementById('red_team');
					if (redTeam) {
						let redTeamChildNodes = redTeam.childNodes;
						for (let i = 0; i < redTeamChildNodes.length; i++) {
							let userName = redTeamChildNodes[i].innerHTML;
							let userId = redTeamChildNodes[i].getAttribute("data-user-id");
							let team = "Red";

							let loginLink = window.location.protocol + "//" + window.location.hostname + ":3000/games/pathways?";
							loginLink = loginLink + "nick_name=" + userName + "&team=" + team + "&game_id=" + gameId + "&room_name=" + roomName;

							// Update the users table.
							let data3 = { "login_link": loginLink }

							$.ajax({
								url: '/users/' + userId,
								type: 'PUT',
								contentType: 'application/json',
								data: JSON.stringify(data3), // access in body
								success: function (data3) {
									console.log('Links created.');
								}
							});
						}
					}

					let purpleTeam = document.getElementById('purple_team');
					if (purpleTeam) {
						let purpleTeamChildNodes = purpleTeam.childNodes;
						for (let i = 0; i < purpleTeamChildNodes.length; i++) {
							let userName = purpleTeamChildNodes[i].innerHTML;
							let userId = purpleTeamChildNodes[i].getAttribute("data-user-id");
							let team = "Purple";

							let loginLink = window.location.protocol + "//" + window.location.hostname + ":3000/games/pathways?";
							loginLink = loginLink + "nick_name=" + userName + "&team=" + team + "&game_id=" + gameId + "&room_name=" + roomName;

							// Update the users table.
							let data4 = { "login_link": loginLink }

							$.ajax({
								url: '/users/' + userId,
								type: 'PUT',
								contentType: 'application/json',
								data: JSON.stringify(data4), // access in body
								success: function (data4) {
									console.log('Links created.');
								}
							});
						}
					}

					let orangeTeam = document.getElementById('orange_team');
					if (orangeTeam) {
						let orangeTeamChildNodes = orangeTeam.childNodes;
						for (let i = 0; i < orangeTeamChildNodes.length; i++) {
							let userName = orangeTeamChildNodes[i].innerHTML;
							let userId = orangeTeamChildNodes[i].getAttribute("data-user-id");
							let team = "Orange";

							let loginLink = window.location.protocol + "//" + window.location.hostname + ":3000/games/pathways?";
							loginLink = loginLink + "nick_name=" + userName + "&team=" + team + "&game_id=" + gameId + "&room_name=" + roomName;

							// Update the users table.
							let data5 = { "login_link": loginLink }

							$.ajax({
								url: '/users/' + userId,
								type: 'PUT',
								contentType: 'application/json',
								data: JSON.stringify(data5),
								success: function (data5) {
									console.log('Links created.');
								}
							});
						}
					}

					let greenTeam = document.getElementById('green_team');
					if (greenTeam) {
						let greenTeamChildNodes = greenTeam.childNodes;
						for (let i = 0; i < greenTeamChildNodes.length; i++) {
							let userName = greenTeamChildNodes[i].innerHTML;
							let userId = greenTeamChildNodes[i].getAttribute("data-user-id");
							let team = "Green";

							let loginLink = window.location.protocol + "//" + window.location.hostname + ":3000/games/pathways?";
							loginLink = loginLink + "nick_name=" + userName + "&team=" + team + "&game_id=" + gameId + "&room_name=" + roomName;

							// Update the users table.
							let data6 = { "login_link": loginLink }

							$.ajax({
								url: '/users/' + userId,
								type: 'PUT',
								contentType: 'application/json',
								data: JSON.stringify(data6),
								success: function (data6) {
									console.log('Links created.');
								}
							});
						}
					}


					// Game for the admin/teacher.
					var adminGameView = document.getElementById("admin-gameview");
					adminGameView.style.display = "block";

					var adminGameUrl = window.location.protocol + "//" + window.location.hostname + ":3000/games/pathways?";
					adminGameUrl = adminGameUrl + "nick_name=Teacher&team=Teacher&game_id=" + gameId + "&room_name=" + roomName;

					// add admin URL to iframe.
					adminGameView.setAttribute("src", adminGameUrl);

					alert("Student links created!");

				}

				function CreateNewTeam() {
					var redTeamDiv = document.getElementById("red_team");
					var purpleTeamDiv = document.getElementById("purple_team");
					var orangeTeamDiv = document.getElementById("orange_team");
					var greenTeamDiv = document.getElementById("green_team");
					if (!redTeamDiv) {
						const redTeamDiv = document.createElement("div");
						redTeamDiv.setAttribute("id", "red_team");
						redTeamDiv.setAttribute("ondrop", "drop_handler(event);");
						redTeamDiv.setAttribute("ondragover", "dragover_handler(event);");
						redTeamDiv.classList.add("brand-border");
						redTeamDiv.classList.add("team_box");
						var teamsInner = document.getElementById('teamsInner');
						teamsInner.appendChild(redTeamDiv);
					}
					else if (!purpleTeamDiv) {
						const purpleTeamDiv = document.createElement("div");
						purpleTeamDiv.setAttribute("id", "purple_team");
						purpleTeamDiv.setAttribute("ondrop", "drop_handler(event);");
						purpleTeamDiv.setAttribute("ondragover", "dragover_handler(event);");
						purpleTeamDiv.classList.add("brand-border");
						purpleTeamDiv.classList.add("team_box");
						var teamsInner = document.getElementById('teamsInner');
						teamsInner.appendChild(purpleTeamDiv);
					}
					else if (!orangeTeamDiv) {
						const orangeTeamDiv = document.createElement("div");
						orangeTeamDiv.setAttribute("id", "orange_team");
						orangeTeamDiv.setAttribute("ondrop", "drop_handler(event);");
						orangeTeamDiv.setAttribute("ondragover", "dragover_handler(event);");
						orangeTeamDiv.classList.add("brand-border");
						orangeTeamDiv.classList.add("team_box");
						var teamsInner = document.getElementById('teamsInner');
						teamsInner.appendChild(orangeTeamDiv);
					}
					else if (!greenTeamDiv) {
						const greenTeamDiv = document.createElement("div");
						greenTeamDiv.setAttribute("id", "green_team");
						greenTeamDiv.setAttribute("ondrop", "drop_handler(event);");
						greenTeamDiv.setAttribute("ondragover", "dragover_handler(event);");
						greenTeamDiv.classList.add("brand-border");
						greenTeamDiv.classList.add("team_box");
						var teamsInner = document.getElementById('teamsInner');
						teamsInner.appendChild(greenTeamDiv);
					}
				}

			</script>
</body>

</html>